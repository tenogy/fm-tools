// ReSharper disable once CheckNamespace
namespace Tenogy.Tools.FluentMigrator.Options;

public sealed class FluentMigratorRunnerOptions
{
	// -- assembly: The assembly containing the migrations you want to execute.
	public string TargetAssembly { get; set; } = "";

	// -- provider: The kind of database you are migrating against.
	public string ProcessorType { get; set; } = "";

	// -- connection-string: The name of the connection string (falls back to machine name) or the connection string itself to the server and database you want to execute your migrations against.
	public string? ConnectionString { get; set; }

	// -- namespace: The namespace contains the migrations you want to run. Default is all migrations found within the Target Assembly will be run.
	public string? NameSpace { get; set; }

	// -- nested-namespaces: Whether migrations in nested namespaces should be included. Used in conjunction with the namespace option.
	public bool NestedNameSpaces { get; set; }

	// -- output: Output generated SQL to a file. Default is no output. Use outputFilename to control the filename, otherwise [assemblyName].sql is the default.
	public bool Output { get; set; }

	// -- output-file-name: The name of the file to output the generated SQL to. The output option must be included for output to be saved to the file.
	public string? OutputFileName { get; set; }

	// -- preview: Only output the SQL generated by the migration - do not execute it. Default is false.
	public bool PreviewOnly { get; set; }

	// -- steps: The number of versions to rollback if the task is 'rollback'. Default is 1.
	public int Steps { get; set; } = 1;

	// -- task: The task you want FluentMigrator to perform. Available choices are: migrate:up, migrate (same as migrate:up), migrate:down, rollback, rollback:toversion, rollback:all, validateversionorder, listmigrations. Default is 'migrate'.
	public string Task { get; set; } = "migrate:up";

	// -- version: The specific version to migrate. Default is 0, which will run all migrations.
	public long Version { get; set; }

	// -- start-version: The specific version to migrate. Default is 0, which will run all migrations.
	public long StartVersion { get; set; }

	// -- no-connection: Indicates that migrations will be generated without consulting a target database. Should only be used when generating an output file.
	public bool NoConnection { get; set; }

	// -- verbose: Show the SQL statements generated and execution time in the console. Default is false.
	public bool Verbose { get; set; }

	// -- working-directory: The directory to load SQL scripts specified by migrations from.
	public string? WorkingDirectory { get; set; }

	// -- profile: The profile to run after executing migrations.
	public string? Profile { get; set; }

	// -- timeout: Overrides the default SqlCommand timeout of 30 seconds.
	public int? Timeout { get; set; }

	// -- tag: Filters the migrations to be run by tag.
	public string[]? Tags { get; set; }

	// -- provider-switches: Provider specific switches.
	public string? ProviderSwitches { get; set; }

	// -- strip-comments: Strip comments from the SQL scripts.
	public bool StripComments { get; set; } = true;

	// -- transaction-per-session: Overrides the transaction behavior of migrations, so that all migrations to be executed will run in one transaction.
	public bool TransactionPerSession { get; set; }

	// -- allow-breaking-change: Allows execution of migrations marked as breaking changes.
	public bool AllowBreakingChange { get; set; }

	// -- default-schema-name: Set default schema name for the VersionInfo table and the migrations.
	public string? DefaultSchemaName { get; set; }
}
